/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ResumeService } from "../resume.service";
import { ResumeCreateInput } from "./ResumeCreateInput";
import { Resume } from "./Resume";
import { ResumeFindManyArgs } from "./ResumeFindManyArgs";
import { ResumeWhereUniqueInput } from "./ResumeWhereUniqueInput";
import { ResumeUpdateInput } from "./ResumeUpdateInput";
import { EducationFindManyArgs } from "../../education/base/EducationFindManyArgs";
import { Education } from "../../education/base/Education";
import { EducationWhereUniqueInput } from "../../education/base/EducationWhereUniqueInput";
import { ExperienceFindManyArgs } from "../../experience/base/ExperienceFindManyArgs";
import { Experience } from "../../experience/base/Experience";
import { ExperienceWhereUniqueInput } from "../../experience/base/ExperienceWhereUniqueInput";
import { LanguageFindManyArgs } from "../../language/base/LanguageFindManyArgs";
import { Language } from "../../language/base/Language";
import { LanguageWhereUniqueInput } from "../../language/base/LanguageWhereUniqueInput";

export class ResumeControllerBase {
  constructor(protected readonly service: ResumeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Resume })
  async createResume(@common.Body() data: ResumeCreateInput): Promise<Resume> {
    return await this.service.createResume({
      data: data,
      select: {
        createdAt: true,
        educationList: true,
        emailAddress: true,
        experienceList: true,
        firstName: true,
        id: true,
        lastName: true,
        phoneNumber: true,
        resumeHash: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Resume] })
  @ApiNestedQuery(ResumeFindManyArgs)
  async resumes(@common.Req() request: Request): Promise<Resume[]> {
    const args = plainToClass(ResumeFindManyArgs, request.query);
    return this.service.resumes({
      ...args,
      select: {
        createdAt: true,
        educationList: true,
        emailAddress: true,
        experienceList: true,
        firstName: true,
        id: true,
        lastName: true,
        phoneNumber: true,
        resumeHash: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Resume })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async resume(
    @common.Param() params: ResumeWhereUniqueInput
  ): Promise<Resume | null> {
    const result = await this.service.resume({
      where: params,
      select: {
        createdAt: true,
        educationList: true,
        emailAddress: true,
        experienceList: true,
        firstName: true,
        id: true,
        lastName: true,
        phoneNumber: true,
        resumeHash: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Resume })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateResume(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() data: ResumeUpdateInput
  ): Promise<Resume | null> {
    try {
      return await this.service.updateResume({
        where: params,
        data: data,
        select: {
          createdAt: true,
          educationList: true,
          emailAddress: true,
          experienceList: true,
          firstName: true,
          id: true,
          lastName: true,
          phoneNumber: true,
          resumeHash: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Resume })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteResume(
    @common.Param() params: ResumeWhereUniqueInput
  ): Promise<Resume | null> {
    try {
      return await this.service.deleteResume({
        where: params,
        select: {
          createdAt: true,
          educationList: true,
          emailAddress: true,
          experienceList: true,
          firstName: true,
          id: true,
          lastName: true,
          phoneNumber: true,
          resumeHash: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/educations")
  @ApiNestedQuery(EducationFindManyArgs)
  async findEducations(
    @common.Req() request: Request,
    @common.Param() params: ResumeWhereUniqueInput
  ): Promise<Education[]> {
    const query = plainToClass(EducationFindManyArgs, request.query);
    const results = await this.service.findEducations(params.id, {
      ...query,
      select: {
        createdAt: true,
        fieldOfStudy: true,
        fromMonth: true,
        fromYear: true,
        id: true,
        institutionName: true,

        resume: {
          select: {
            id: true,
          },
        },

        toMonth: true,
        toYear: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/educations")
  async connectEducations(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: EducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educations: {
        connect: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/educations")
  async updateEducations(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: EducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educations: {
        set: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/educations")
  async disconnectEducations(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: EducationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      educations: {
        disconnect: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/experiences")
  @ApiNestedQuery(ExperienceFindManyArgs)
  async findExperiences(
    @common.Req() request: Request,
    @common.Param() params: ResumeWhereUniqueInput
  ): Promise<Experience[]> {
    const query = plainToClass(ExperienceFindManyArgs, request.query);
    const results = await this.service.findExperiences(params.id, {
      ...query,
      select: {
        companyName: true,
        createdAt: true,
        currentJob: true,
        fromMonth: true,
        fromYear: true,
        id: true,
        jobResponsibilities: true,
        jobTitle: true,

        resume: {
          select: {
            id: true,
          },
        },

        toMonth: true,
        toYear: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/experiences")
  async connectExperiences(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiences: {
        connect: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/experiences")
  async updateExperiences(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiences: {
        set: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/experiences")
  async disconnectExperiences(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiences: {
        disconnect: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/languages")
  @ApiNestedQuery(LanguageFindManyArgs)
  async findLanguages(
    @common.Req() request: Request,
    @common.Param() params: ResumeWhereUniqueInput
  ): Promise<Language[]> {
    const query = plainToClass(LanguageFindManyArgs, request.query);
    const results = await this.service.findLanguages(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        language: true,

        resume: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/languages")
  async connectLanguages(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: LanguageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      languages: {
        connect: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/languages")
  async updateLanguages(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: LanguageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      languages: {
        set: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/languages")
  async disconnectLanguages(
    @common.Param() params: ResumeWhereUniqueInput,
    @common.Body() body: LanguageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      languages: {
        disconnect: body,
      },
    };
    await this.service.updateResume({
      where: params,
      data,
      select: { id: true },
    });
  }
}
