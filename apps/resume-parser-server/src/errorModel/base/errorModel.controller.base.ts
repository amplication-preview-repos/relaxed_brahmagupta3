/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ErrorModelService } from "../errorModel.service";
import { ErrorModelCreateInput } from "./ErrorModelCreateInput";
import { ErrorModel } from "./ErrorModel";
import { ErrorModelFindManyArgs } from "./ErrorModelFindManyArgs";
import { ErrorModelWhereUniqueInput } from "./ErrorModelWhereUniqueInput";
import { ErrorModelUpdateInput } from "./ErrorModelUpdateInput";

export class ErrorModelControllerBase {
  constructor(protected readonly service: ErrorModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ErrorModel })
  async createErrorModel(
    @common.Body() data: ErrorModelCreateInput
  ): Promise<ErrorModel> {
    return await this.service.createErrorModel({
      data: data,
      select: {
        code: true,
        createdAt: true,
        id: true,
        message: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ErrorModel] })
  @ApiNestedQuery(ErrorModelFindManyArgs)
  async errorModels(@common.Req() request: Request): Promise<ErrorModel[]> {
    const args = plainToClass(ErrorModelFindManyArgs, request.query);
    return this.service.errorModels({
      ...args,
      select: {
        code: true,
        createdAt: true,
        id: true,
        message: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ErrorModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async errorModel(
    @common.Param() params: ErrorModelWhereUniqueInput
  ): Promise<ErrorModel | null> {
    const result = await this.service.errorModel({
      where: params,
      select: {
        code: true,
        createdAt: true,
        id: true,
        message: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ErrorModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateErrorModel(
    @common.Param() params: ErrorModelWhereUniqueInput,
    @common.Body() data: ErrorModelUpdateInput
  ): Promise<ErrorModel | null> {
    try {
      return await this.service.updateErrorModel({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          id: true,
          message: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ErrorModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteErrorModel(
    @common.Param() params: ErrorModelWhereUniqueInput
  ): Promise<ErrorModel | null> {
    try {
      return await this.service.deleteErrorModel({
        where: params,
        select: {
          code: true,
          createdAt: true,
          id: true,
          message: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
