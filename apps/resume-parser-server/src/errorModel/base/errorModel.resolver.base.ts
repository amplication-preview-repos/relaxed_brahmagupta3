/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ErrorModel } from "./ErrorModel";
import { ErrorModelCountArgs } from "./ErrorModelCountArgs";
import { ErrorModelFindManyArgs } from "./ErrorModelFindManyArgs";
import { ErrorModelFindUniqueArgs } from "./ErrorModelFindUniqueArgs";
import { CreateErrorModelArgs } from "./CreateErrorModelArgs";
import { UpdateErrorModelArgs } from "./UpdateErrorModelArgs";
import { DeleteErrorModelArgs } from "./DeleteErrorModelArgs";
import { ErrorModelService } from "../errorModel.service";
@graphql.Resolver(() => ErrorModel)
export class ErrorModelResolverBase {
  constructor(protected readonly service: ErrorModelService) {}

  async _errorModelsMeta(
    @graphql.Args() args: ErrorModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ErrorModel])
  async errorModels(
    @graphql.Args() args: ErrorModelFindManyArgs
  ): Promise<ErrorModel[]> {
    return this.service.errorModels(args);
  }

  @graphql.Query(() => ErrorModel, { nullable: true })
  async errorModel(
    @graphql.Args() args: ErrorModelFindUniqueArgs
  ): Promise<ErrorModel | null> {
    const result = await this.service.errorModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ErrorModel)
  async createErrorModel(
    @graphql.Args() args: CreateErrorModelArgs
  ): Promise<ErrorModel> {
    return await this.service.createErrorModel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ErrorModel)
  async updateErrorModel(
    @graphql.Args() args: UpdateErrorModelArgs
  ): Promise<ErrorModel | null> {
    try {
      return await this.service.updateErrorModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ErrorModel)
  async deleteErrorModel(
    @graphql.Args() args: DeleteErrorModelArgs
  ): Promise<ErrorModel | null> {
    try {
      return await this.service.deleteErrorModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
